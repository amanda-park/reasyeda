`Outlier Count` = base::length(grDevices::boxplot.stats(var)$out)) %>%
base::t() %>%
base::as.data.frame() %>%
tibble::rownames_to_column("row_names") %>%
purrr::set_names("Numeric Metric", "Value")
return(output)
}
numeric_metric_calculations(df = penguins, var = bill_length_mm)
numeric_metric_calculations(df = penguins, var = bill_depth_mm)
numeric_metric_calculations <- function(df = data,
var = data[[input$pred]]) {
output <- df %>%
dplyr::select(!!var) %>%
summarize(`Minimum Value` = base::min(var, na.rm = TRUE),
`25% Percentile` = stats::quantile(var, 0.25, na.rm = TRUE),
`Mean Value` = base::round(mean(var, na.rm = TRUE), 2),
`Median Value` = stats::median(var, na.rm = TRUE),
`75% Percentile` = stats::quantile(var, 0.75, na.rm = TRUE),
`Maximum Value` = base::max(var, na.rm = TRUE),
`Missing Count` = base::sum(is.na(var)),
`Total Observations` = dplyr::n(),
`Zero Value Count` = base::sum(var == 0, na.rm = TRUE),
`Negative Value Count` = base::sum(var < 0, na.rm = TRUE),
`Outlier Count` = base::length(grDevices::boxplot.stats(var)$out)) %>%
base::t() %>%
base::as.data.frame()
return(output)
}
numeric_metric_calculations(df = penguins, var = bill_depth_mm)
numeric_metric_calculations <- function(df = data,
var = data[[input$pred]]) {
output <- df %>%
dplyr::select(var) #%>%
# summarize(`Minimum Value` = base::min(var, na.rm = TRUE),
#           `25% Percentile` = stats::quantile(var, 0.25, na.rm = TRUE),
#           `Mean Value` = base::round(mean(var, na.rm = TRUE), 2),
#           `Median Value` = stats::median(var, na.rm = TRUE),
#           `75% Percentile` = stats::quantile(var, 0.75, na.rm = TRUE),
#           `Maximum Value` = base::max(var, na.rm = TRUE),
#           `Missing Count` = base::sum(is.na(var)),
#           `Total Observations` = dplyr::n(),
#           `Zero Value Count` = base::sum(var == 0, na.rm = TRUE),
#           `Negative Value Count` = base::sum(var < 0, na.rm = TRUE),
#           `Outlier Count` = base::length(grDevices::boxplot.stats(var)$out)) %>%
# base::t() %>%
# base::as.data.frame() %>%
# tibble::rownames_to_column("row_names") %>%
# purrr::set_names("Numeric Metric", "Value")
return(output)
}
numeric_metric_calculations(df = penguins, var = bill_depth_mm)
numeric_metric_calculations <- function(df = data,
var = data[[input$pred]]) {
var <- enquo(var)
output <- df %>%
dplyr::select(var) #%>%
# summarize(`Minimum Value` = base::min(var, na.rm = TRUE),
#           `25% Percentile` = stats::quantile(var, 0.25, na.rm = TRUE),
#           `Mean Value` = base::round(mean(var, na.rm = TRUE), 2),
#           `Median Value` = stats::median(var, na.rm = TRUE),
#           `75% Percentile` = stats::quantile(var, 0.75, na.rm = TRUE),
#           `Maximum Value` = base::max(var, na.rm = TRUE),
#           `Missing Count` = base::sum(is.na(var)),
#           `Total Observations` = dplyr::n(),
#           `Zero Value Count` = base::sum(var == 0, na.rm = TRUE),
#           `Negative Value Count` = base::sum(var < 0, na.rm = TRUE),
#           `Outlier Count` = base::length(grDevices::boxplot.stats(var)$out)) %>%
# base::t() %>%
# base::as.data.frame() %>%
# tibble::rownames_to_column("row_names") %>%
# purrr::set_names("Numeric Metric", "Value")
return(output)
}
numeric_metric_calculations(df = penguins, var = bill_depth_mm)
numeric_metric_calculations <- function(df = data,
var = data[[input$pred]]) {
var <- quo(var)
output <- df %>%
dplyr::select(var) #%>%
# summarize(`Minimum Value` = base::min(var, na.rm = TRUE),
#           `25% Percentile` = stats::quantile(var, 0.25, na.rm = TRUE),
#           `Mean Value` = base::round(mean(var, na.rm = TRUE), 2),
#           `Median Value` = stats::median(var, na.rm = TRUE),
#           `75% Percentile` = stats::quantile(var, 0.75, na.rm = TRUE),
#           `Maximum Value` = base::max(var, na.rm = TRUE),
#           `Missing Count` = base::sum(is.na(var)),
#           `Total Observations` = dplyr::n(),
#           `Zero Value Count` = base::sum(var == 0, na.rm = TRUE),
#           `Negative Value Count` = base::sum(var < 0, na.rm = TRUE),
#           `Outlier Count` = base::length(grDevices::boxplot.stats(var)$out)) %>%
# base::t() %>%
# base::as.data.frame() %>%
# tibble::rownames_to_column("row_names") %>%
# purrr::set_names("Numeric Metric", "Value")
return(output)
}
numeric_metric_calculations(df = penguins, var = bill_depth_mm)
numeric_metric_calculations <- function(df = data,
var = data[[input$pred]]) {
var <- enquo(var)
output <- df %>%
dplyr::select(!!var) #%>%
# summarize(`Minimum Value` = base::min(var, na.rm = TRUE),
#           `25% Percentile` = stats::quantile(var, 0.25, na.rm = TRUE),
#           `Mean Value` = base::round(mean(var, na.rm = TRUE), 2),
#           `Median Value` = stats::median(var, na.rm = TRUE),
#           `75% Percentile` = stats::quantile(var, 0.75, na.rm = TRUE),
#           `Maximum Value` = base::max(var, na.rm = TRUE),
#           `Missing Count` = base::sum(is.na(var)),
#           `Total Observations` = dplyr::n(),
#           `Zero Value Count` = base::sum(var == 0, na.rm = TRUE),
#           `Negative Value Count` = base::sum(var < 0, na.rm = TRUE),
#           `Outlier Count` = base::length(grDevices::boxplot.stats(var)$out)) %>%
# base::t() %>%
# base::as.data.frame() %>%
# tibble::rownames_to_column("row_names") %>%
# purrr::set_names("Numeric Metric", "Value")
return(output)
}
numeric_metric_calculations(df = penguins, var = bill_depth_mm)
numeric_metric_calculations <- function(df = data,
var = data[[input$pred]]) {
var <- enquo(var)
output <- df %>%
dplyr::select(!!var) %>%
summarize(`Minimum Value` = base::min(var, na.rm = TRUE),
`25% Percentile` = stats::quantile(var, 0.25, na.rm = TRUE),
`Mean Value` = base::round(mean(var, na.rm = TRUE), 2),
`Median Value` = stats::median(var, na.rm = TRUE),
`75% Percentile` = stats::quantile(var, 0.75, na.rm = TRUE),
`Maximum Value` = base::max(var, na.rm = TRUE),
`Missing Count` = base::sum(is.na(var)),
`Total Observations` = dplyr::n(),
`Zero Value Count` = base::sum(var == 0, na.rm = TRUE),
`Negative Value Count` = base::sum(var < 0, na.rm = TRUE),
`Outlier Count` = base::length(grDevices::boxplot.stats(var)$out)) %>%
base::t() %>%
base::as.data.frame() %>%
tibble::rownames_to_column("row_names") %>%
purrr::set_names("Numeric Metric", "Value")
return(output)
}
numeric_metric_calculations(df = penguins, var = bill_depth_mm)
numeric_metric_calculations <- function(df = data,
var = data[[input$pred]]) {
var2 <- enquo(var)
output <- df %>%
dplyr::select(!!var2) %>%
summarize(`Minimum Value` = base::min(var, na.rm = TRUE),
`25% Percentile` = stats::quantile(var, 0.25, na.rm = TRUE),
`Mean Value` = base::round(mean(var, na.rm = TRUE), 2),
`Median Value` = stats::median(var, na.rm = TRUE),
`75% Percentile` = stats::quantile(var, 0.75, na.rm = TRUE),
`Maximum Value` = base::max(var, na.rm = TRUE),
`Missing Count` = base::sum(is.na(var)),
`Total Observations` = dplyr::n(),
`Zero Value Count` = base::sum(var == 0, na.rm = TRUE),
`Negative Value Count` = base::sum(var < 0, na.rm = TRUE),
`Outlier Count` = base::length(grDevices::boxplot.stats(var)$out)) %>%
base::t() %>%
base::as.data.frame() %>%
tibble::rownames_to_column("row_names") %>%
purrr::set_names("Numeric Metric", "Value")
return(output)
}
numeric_metric_calculations(df = penguins, var = bill_depth_mm)
numeric_metric_calculations <- function(df = data,
var = data[[input$pred]]) {
var <- enquo(var)
output <- df %>%
dplyr::select(!!var) %>%
summarize(`Minimum Value` = base::min(!!var, na.rm = TRUE),
`25% Percentile` = stats::quantile(var, 0.25, na.rm = TRUE),
`Mean Value` = base::round(mean(var, na.rm = TRUE), 2),
`Median Value` = stats::median(var, na.rm = TRUE),
`75% Percentile` = stats::quantile(var, 0.75, na.rm = TRUE),
`Maximum Value` = base::max(var, na.rm = TRUE),
`Missing Count` = base::sum(is.na(var)),
`Total Observations` = dplyr::n(),
`Zero Value Count` = base::sum(var == 0, na.rm = TRUE),
`Negative Value Count` = base::sum(var < 0, na.rm = TRUE),
`Outlier Count` = base::length(grDevices::boxplot.stats(var)$out)) %>%
base::t() %>%
base::as.data.frame() %>%
tibble::rownames_to_column("row_names") %>%
purrr::set_names("Numeric Metric", "Value")
return(output)
}
numeric_metric_calculations(df = penguins, var = bill_depth_mm)
numeric_metric_calculations <- function(df = data,
var = data[[input$pred]]) {
var <- enquo(var)
output <- df %>%
dplyr::select(!!var) %>%
summarize(`Minimum Value` = base::min(!!var, na.rm = TRUE),
`25% Percentile` = stats::quantile(!!var, 0.25, na.rm = TRUE),
`Mean Value` = base::round(mean(!!var, na.rm = TRUE), 2),
`Median Value` = stats::median(!!var, na.rm = TRUE),
`75% Percentile` = stats::quantile(!!var, 0.75, na.rm = TRUE),
`Maximum Value` = base::max(!!var, na.rm = TRUE),
`Missing Count` = base::sum(is.na(!!var)),
`Total Observations` = dplyr::n(),
`Zero Value Count` = base::sum(!!var == 0, na.rm = TRUE),
`Negative Value Count` = base::sum(!!var < 0, na.rm = TRUE),
`Outlier Count` = base::length(grDevices::boxplot.stats(!!var)$out)) %>%
base::t() %>%
base::as.data.frame() %>%
tibble::rownames_to_column("row_names") %>%
purrr::set_names("Numeric Metric", "Value")
return(output)
}
numeric_metric_calculations(df = penguins, var = bill_depth_mm)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
?datatable
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
?IQR
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
?set_names
penguins[,"bill_length_mm"]
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
max(penguins[,"bill_length_mm"], na.rm = TRUE)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
median(penguins[,"bill_length_mm"], na.rm = TRUE)
str(penguins[,"bill_length_mm"])
median(as.numeric(penguins[,"bill_length_mm"], na.rm = TRUE))
penguins[,"bill_length_mm"] %>% pull()
?pull
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
?rownames_to_column
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
## Parallel computing can help analyses run faster, if you have the cores on your computer to spare
library(doParallel)
## R's version of scikit-learn, basically - machine learning one stop shop
library(tidymodels)
tidymodels_prefer()
## Custom R package for simplifying the tidymodels process
#remotes::install_github('amanda-park/easytidymodels')
library(easytidymodels)
remotes::install_github('amanda-park/easytidymodels')
library(easytidymodels)
?bootstraps
install.packages("golem")
library(devtools)
detach("package:devtools", unload = TRUE)
install.packages("cli")
install.packages("cli")
remove.packages("cli", lib="~/R/win-library/4.1")
install.packages("cli")
library(devtools)
devtools::install_github("amanda-park/reasyeda")
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
datatable_var_output <- function(data)  {
DT::datatable(
data = data,
rownames = NULL,
extensions = "Buttons",
options = list(
paging = FALSE,
searching = FALSE,
dom = 'Bfrtip',
buttons = list('copy', 'csv', 'excel'),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#007ba7', 'color': '#ffffff'});",
"}"))
)
)
}
datatable_var_output <- function(data)  {
DT::datatable(
data = data,
rownames = NULL,
extensions = "Buttons",
options = list(
paging = FALSE,
searching = FALSE,
dom = 'Bfrtip',
buttons = list('copy', 'csv', 'excel'),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#007ba7', 'color': '#ffffff'});",
"}")
)
)
}
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
?JS
datatable_var_output <- function(data)  {
DT::datatable(
data = data,
rownames = NULL,
extensions = "Buttons",
options = list(
paging = FALSE,
searching = FALSE,
dom = 'Bfrtip',
buttons = list('copy', 'csv', 'excel'),
initComplete = DT::JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#007ba7', 'color': '#ffffff'});",
"}")
)
)
}
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
?toupper
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
devtools::install()
devtools::build()
use_r("histogram_plot.R")
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
use_r("bar_plot.R")
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
source("~/GitHub/R-Easy-EDA/R/bar_plot.R")
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
use_r("density_plot.R")
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
use_r("var_str_clean")
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
use_r("scatter_plot")
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
use_r("box_plot")
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
devtools::install()
require(reasyeda)
#Load penguins dataset
data(penguins, package = "modeldata")
shinyEDA(penguins)
